{"version":3,"sources":["app/CacheAddOn.ts"],"names":[],"mappings":";;;;;;;;;;;;;;AAAA,yEAAkE;AAClE,yEAAiG;AACjG,+DAAqG;AAErG,mDAA8E;AAC9E,mCAAqC;AAIrC,IAAa,UAAU,GAAvB;IAIC,YACuC,eAAuC,EACnC,aAAmC;QADvC,oBAAe,GAAf,eAAe,CAAwB;QACnC,kBAAa,GAAb,aAAa,CAAsB;QAE7E,4BAAK,CAAC,gBAAgB,CAAC,iBAAiB,EAAE,eAAe,CAAC,CAAC;QAC3D,4BAAK,CAAC,gBAAgB,CAAC,eAAe,EAAE,aAAa,CAAC,CAAC;IACxD,CAAC;IAED;;OAEG;IACI,IAAI;QACV,IAAI,KAAK,GAAG,yCAAa,CAAC,YAAY,CAAC,IAAI,CAAC,eAAe,CAAC,CAAC;QAC7D,EAAE,CAAC,CAAC,CAAC,KAAK,IAAI,CAAC,KAAK,CAAC,MAAM,CAAC,CAAC,CAAC;YAAC,MAAM,CAAC,OAAO,CAAC,OAAO,EAAE,CAAC;QAAC,CAAC;QAE1D,IAAI,IAAI,GAAiC;YACvC,IAAI,EAAE,IAAI,CAAC,eAAe,CAAC,GAAG,CAAC,0CAAG,CAAC,YAAY,CAAC;SAChD,CAAC;QAEH,EAAE,CAAC,CAAC,KAAK,CAAC,MAAM,IAAI,CAAC,CAAC,CAAC,CAAC;YACvB,IAAI,CAAC,MAAM,GAAG,KAAK,CAAC,CAAC,CAAC,CAAC;QACxB,CAAC;QAAC,IAAI,CAAC,CAAC;YACP,IAAI,CAAC,OAAO,GAAG,KAAK,CAAC;QACtB,CAAC;QAED,IAAI,CAAC,cAAc,GAAG,IAAI,6BAAa,CAAC,IAAI,CAAC,CAAC;QAC9C,IAAI,CAAC,aAAa,CAAC,YAAY,CAAgB,aAAC,CAAC,cAAc,EAAE,IAAI,CAAC,cAAc,CAAC,CAAC;QACtF,MAAM,CAAC,OAAO,CAAC,OAAO,EAAE,CAAC;IAC1B,CAAC;IAED;;OAEG;IACI,UAAU;QAChB,MAAM,CAAC,OAAO,CAAC,OAAO,EAAE,CAAC;IAC1B,CAAC;IAED;;OAEG;IACI,OAAO;QACb,MAAM,CAAC,CAAC,IAAI,CAAC,cAAc,CAAC,CAAC,CAAC,CAAC,IAAI,CAAC,cAAc,CAAC,OAAO,EAAE,CAAC,CAAC,CAAC,OAAO,CAAC,OAAO,EAAE,CAAC;IAClF,CAAC;CACD,CAAA;AA/CY,UAAU;IADtB,iCAAU,EAAE;IAMV,WAAA,6BAAM,CAAC,iCAAI,CAAC,eAAe,CAAC,CAAA;IAC5B,WAAA,6BAAM,CAAC,4BAAG,CAAC,oBAAoB,CAAC,CAAA;;GANtB,UAAU,CA+CtB;AA/CY,gCAAU","file":"CacheAddOn.js","sourcesContent":["import { SvcSettingKeys as Svc } from 'back-lib-common-constants';\r\nimport { IConfigurationProvider, CacheSettings, Types as ConT } from 'back-lib-common-contracts';\r\nimport { injectable, inject, Guard, IDependencyContainer, Types as CmT } from 'back-lib-common-util';\r\n\r\nimport { CacheProvider, CacheProviderConstructorOpts } from './CacheProvider';\r\nimport { Types as T } from './Types';\r\n\r\n\r\n@injectable()\r\nexport class CacheAddOn implements IServiceAddOn {\r\n\t\r\n\tprivate _cacheProvider: CacheProvider;\r\n\r\n\tconstructor(\r\n\t\t@inject(ConT.CONFIG_PROVIDER) private _configProvider: IConfigurationProvider,\r\n\t\t@inject(CmT.DEPENDENCY_CONTAINER) private _depContainer: IDependencyContainer,\r\n\t) {\r\n\t\tGuard.assertArgDefined('_configProvider', _configProvider);\r\n\t\tGuard.assertArgDefined('_depContainer', _depContainer);\r\n\t}\r\n\r\n\t/**\r\n\t * @see IServiceAddOn.init\r\n\t */\r\n\tpublic init(): Promise<void> {\r\n\t\tlet conns = CacheSettings.fromProvider(this._configProvider);\r\n\t\tif (!conns || !conns.length) { return Promise.resolve(); }\r\n\r\n\t\tlet opts: CacheProviderConstructorOpts = {\r\n\t\t\t\tname: this._configProvider.get(Svc.SERVICE_SLUG)\r\n\t\t\t};\r\n\r\n\t\tif (conns.length == 1) {\r\n\t\t\topts.single = conns[0];\r\n\t\t} else {\r\n\t\t\topts.cluster = conns;\r\n\t\t}\r\n\r\n\t\tthis._cacheProvider = new CacheProvider(opts);\r\n\t\tthis._depContainer.bindConstant<CacheProvider>(T.CACHE_PROVIDER, this._cacheProvider);\r\n\t\treturn Promise.resolve();\r\n\t}\r\n\r\n\t/**\r\n\t * @see IServiceAddOn.deadLetter\r\n\t */\r\n\tpublic deadLetter(): Promise<void> {\r\n\t\treturn Promise.resolve();\r\n\t}\r\n\r\n\t/**\r\n\t * @see IServiceAddOn.dispose\r\n\t */\r\n\tpublic dispose(): Promise<void> {\r\n\t\treturn (this._cacheProvider) ? this._cacheProvider.dispose() : Promise.resolve();\r\n\t}\r\n}"]}